<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd">

	<!-- 아래의 MyBatis 관련 설정은 Servers/context.xml 문서에 다음과 같은 DB 접속 정보가 있어야 정상적으로 동작한다.
	
		<Resource name="jdbc/myoracle" auth="Container"
              type="javax.sql.DataSource" driverClassName="oracle.jdbc.OracleDriver"
              url="jdbc:oracle:thin:@127.0.0.1:1521:xe"
              username="scott" password="tiger" maxTotal="20" maxIdle="10"
              maxWaitMillis="-1"/>
	 -->
	<beans:bean id="dataSource" 
		class="org.springframework.jndi.JndiObjectFactoryBean">
		<beans:property name="jndiName" value="java:comp/env/jdbc/myoracle"/>
	</beans:bean>
	<!-- 위의 설정을 java code로 환산하면
	
		 dataSource=new JndiObjectFactoryBean();
		 dataSource.setJndiName("java:comp/env/jdbc/myoracle"); 
	-->
	
	<beans:bean id="sessionFactory" 
		class="org.mybatis.spring.SqlSessionFactoryBean">
		<beans:property name="dataSource" ref="dataSource"/>		<!-- 위에서 언급된 dataSource를 참조하고 있다. -->
		<beans:property name="configLocation"
				value="classpath:com/winnie/spring05/mybatis/Configuration.xml"/>
	</beans:bean>
	<!-- 위의 설정을 java code로 환산하면
	
		 dataSource=new JndiObjectFactoryBean();
		 dataSource.setJndiName("java:comp/env/jdbc/myoracle"); 
		 
		 sessionFactory=new SqlSessionFactoryBean();
		 sessionFactory.setDataSource(dataSource);
		 sessionFactory.setConfigLocation(classpath:com/gura/spring05/mybatis/Configuration.xml);
	-->
	
	<beans:bean class="org.mybatis.spring.SqlSessionTemplate">
		<beans:constructor-arg name="sqlSessionFactory" ref="sessionFactory"/>
			<!-- constructor-arg : 생성자의 인자, SqlSessionTemplate : dao가 의존하는 객체 -->
	</beans:bean>
	<!-- 위의 설정을 java code로 환산하면
		 
		 new SqlSessionTemplate(sessionFactory);
	-->

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Transaction Manager 설정 -->
	<beans:bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<beans:property name="dataSource" ref="dataSource"/>
	</beans:bean>
	
	<!-- 위의 설정을 java code로 환산하면
	
		 txManager=new DataSourceTransactionManager();
		 txManager.setDataSource(dataSource); 
	-->
	
	<!-- 어노테이션으로 트랜잭션 설정이 가능하도록 -->
	<tx:annotation-driven transaction-manager="txManager"/>
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	<context:component-scan base-package="com.winnie.spring05" />
	
	<!-- 어노테이션 기반으로 aop 적용할 수 있도록 설정 -->
	<aop:aspectj-autoproxy></aop:aspectj-autoproxy>
	
	<!-- 파일 업로드 폼 전송 처리를 위한 bean 설정 -->
	<beans:bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<beans:property name="maxUploadSize" value="10240000"/>		<!-- 1024 = 1Kb, 참고로 *(곱하기)는 적용이 안된다. -->
	</beans:bean>
	
	<!-- bean 의 이름으로 view 를 찾아 갈수 있도록 설정 -->
	<beans:bean class="org.springframework.web.servlet.view.BeanNameViewResolver">
		<!-- 0 순위로 찾아가도록 하고 없으면 자동으로 views 폴더 안에서 jsp 페이지를 찾는다 -->
		<beans:property name="order" value="0"/>
	</beans:bean>
	
	<!-- web.xml에서 설정된 error 관련된 요청 처리 -->
	<view-controller path="/error/404.do" view-name="error/404"/>
	<view-controller path="/error/500.do" view-name="error/500"/>
	
</beans:beans>
